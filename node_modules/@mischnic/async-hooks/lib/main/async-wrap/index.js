"use strict";
exports.__esModule = true;
var patches_1 = require("./patches");
function startAsyncWrap(hooks, state) {
    var asyncWrap = process.binding('async_wrap');
    for (var _i = 0, _a = Object.keys(patches_1.patches); _i < _a.length; _i++) {
        var key = _a[_i];
        patches_1.patches[key](hooks, state);
    }
    var TIMERWRAP = asyncWrap.Providers.TIMERWRAP;
    var ignoreUIDs = new Set();
    var idMap = new Map();
    function providerToString(provider) {
        switch (provider) {
            case asyncWrap.Providers.NONE:
                return 'NONE';
            case asyncWrap.Providers.CRYPTO:
                return 'CRYPTO';
            case asyncWrap.Providers.FSEVENTWRAP:
                return 'FSEVENTWRAP';
            case asyncWrap.Providers.FSREQWRAP:
                return 'FSREQWRAP';
            case asyncWrap.Providers.GETADDRINFOREQWRAP:
                return 'GETADDRINFOREQWRAP';
            case asyncWrap.Providers.GETNAMEINFOREQWRAP:
                return 'GETNAMEINFOREQWRAP';
            case asyncWrap.Providers.HTTPPARSER:
                return 'HTTPPARSER';
            case asyncWrap.Providers.JSSTREAM:
                return 'JSSTREAM';
            case asyncWrap.Providers.PIPEWRAP:
                return 'PIPEWRAP';
            case asyncWrap.Providers.PIPECONNECTWRAP:
                return 'PIPECONNECTWRAP';
            case asyncWrap.Providers.PROCESSWRAP:
                return 'PROCESSWRAP';
            case asyncWrap.Providers.QUERYWRAP:
                return 'QUERYWRAP';
            case asyncWrap.Providers.SHUTDOWNWRAP:
                return 'SHUTDOWNWRAP';
            case asyncWrap.Providers.SIGNALWRAP:
                return 'SIGNALWRAP';
            case asyncWrap.Providers.STATWATCHER:
                return 'STATWATCHER';
            case asyncWrap.Providers.TCPWRAP:
                return 'TCPWRAP';
            case asyncWrap.Providers.TCPCONNECTWRAP:
                return 'TCPCONNECTWRAP';
            case asyncWrap.Providers.TIMERWRAP:
                return 'TIMERWRAP';
            case asyncWrap.Providers.TLSWRAP:
                return 'TLSWRAP';
            case asyncWrap.Providers.TTYWRAP:
                return 'TTYWRAP';
            case asyncWrap.Providers.UDPWRAP:
                return 'UDPWRAP';
            case asyncWrap.Providers.UDPSENDWRAP:
                return 'UDPSENDWRAP';
            case asyncWrap.Providers.WRITEWRAP:
                return 'WRITEWRAP';
            case asyncWrap.Providers.ZLIB:
                return 'ZLIB';
            default:
                return 'NONE';
        }
    }
    asyncWrap.setupHooks({
        init: function (uid, provider, parentUid, parentHandle) {
            if (provider === TIMERWRAP) {
                ignoreUIDs.add(uid);
            }
            else {
                var asyncId = state.getNextId();
                var parentId = state.currentId;
                var type = providerToString(provider);
                idMap.set(uid, asyncId);
                hooks.init(asyncId, type, parentId, parentHandle);
            }
        },
        pre: function (uid) {
            if (!ignoreUIDs.has(uid)) {
                var asyncId = idMap.get(uid);
                if (asyncId !== undefined) {
                    hooks.pre(asyncId);
                }
            }
        },
        post: function (uid, didThrow) {
            if (!ignoreUIDs.has(uid)) {
                var asyncId = idMap.get(uid);
                if (asyncId !== undefined) {
                    hooks.post(asyncId, didThrow);
                }
            }
        },
        destroy: function (uid) {
            if (ignoreUIDs.has(uid)) {
                ignoreUIDs["delete"](uid);
            }
            else if (idMap.has(uid)) {
                var asyncId = idMap.get(uid);
                if (asyncId !== undefined) {
                    idMap["delete"](uid);
                    hooks.destroy(asyncId);
                }
            }
        }
    });
    asyncWrap.enable();
}
exports.startAsyncWrap = startAsyncWrap;
//# sourceMappingURL=index.js.map